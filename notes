features:

static analysis:
  - strings
  - elf section/program headers
  - disassembly??
  - fuzzy hash
  - sha256, md5 hashes
  - upx unpacking??

dynamic analysis:
  - support for multiple architectures (via buildroot/qemu)
    - vm comes with gdb/gdbserver for debugging if required
  - network simulation and packet capture (inetsim/dumpcap)
  - filesystem tracking (inotifywatch) - open, edit delete (and which process)
  - system call tracing (strace -ff) - (cross reference with fs changes)
  - library call tracing if sample is dynamically linked (ltrace -f)
  - direct vm access for user (ssh|pipe) if invoked
  - direct qemu monitor access if invoked
  - enabling addition of user-defined / predefined cmd-line arguments

dynamic analysis infrastructure:
  - orchestration within vm coordinated by python script (subprocess)
  - shell scripts set up and reset fakeroot environment
  - files transferred to and from vm via custom ftp on non-standard port
    (ssh/scp can be killed by malware)
  - communication with vm done by pipe/stdio

todo:
  - set up logging
  - better error handling, more informative
  - create makefile for testing
  - test vm scripts
  - implement fuzzy hashing

subcommands:
  static  
  dynamic --transfer/-x [FTP|SCP]
  full    --transfer/-x [FTP|SCP]
  qemu    --comms/-c [STDIO|SSH]

arguments:
  -v, --verbose
  -q, --quiet
  -e, --export (pickle, json, text)

ISSUES:
  not particularly robust, unable to properly handle many unusual cases

  some samples compiled for a certain architecture variant may not work
  on the same architecture used by the sandbox (i.e. MIPS-I samples will
  not work with a sandbox VM using MIPS32R6, ARM samples may have different
  embedded ABIs and may not work on the ARM machine)

  no type safety when performing type casts, i.e. converting strings to ints

BUGS:
  if QEMU is asked to load a snapshot that does not exist on a QCOW2 file,
  it will freeze

  The QEMU controller is unable to properly handle a situation where the IoTFTP
  server on the sandbox vm terminates unexpectedly

  QEMU segfaults when loading a live snapshot on MIPS and MIPSEL architectures,
  necessitating these VMs to be reset offline via qemu-img

  shell prompt on the sandbox machine is '# ', so comments in python files and
  shell scripts can be interpreted by pexpect as the new prompt, thereby
  terminating a running command prematurely

TODO: # arranged in order of priority
  add UPX packing detection

  add inotify functionality to analyse script

  add memory image dumping via GDB/ptrace

  implement rest of iotftp commands; add mkdir functionality to create new paths

  add fakenet-style redirection of ip addresses using iptables-nfqueue

  add list of command line arguments to try when invoking sample

  add functionality to load c2 sample onto fakec2

  add collation of IP addresses from PCAP file

  add ability to onboard analysis script to configure analysis time and disable
  certain analysis functionality

  add ability to seamlessly run on a single/batch (sorting by arch, etc)
  
  add ability to detect whether the file is a sample or dir and run single/batch
  accordingly

  add iptables rules parsing from json and using invoke to insert them
  also check for if a rule clashes with rules needed for ip redirection

  add checks for whether the required virtual machines and their images are present

  implement automatic dhcpd and qemu bridge config file generation

  allow overriding of config settings via command-line arguments

BEFORE I LEAVE:
  better logging and UX

  add convenience scripts for building vm images

  add support for result serialization as pickle and text (JSON done)

  add API for user-defined plugins

  add UPX packing detection

  add inotify functionality to analyse script

  ensure all config fields are fully honoured
